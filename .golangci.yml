service:
  golangci-lint-version: 1.59.1 # use the fixed version to not introduce new linters unexpectedly

run:
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: '1.22'

  concurrency: 8

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  # - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|vendor|mod

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

linters:
  enable:
    - prealloc # Finds slice declarations that could potentially be preallocated
    - unused #  (megacheck): Checks Go code for unused constants, variables, functions and types
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple #  (megacheck): Linter for Go source code that specializes in simplifying a code
    - govet #  (vet, vetshadow): Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck #  (megacheck): Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - stylecheck # Stylecheck is a replacement for golint
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # checks whether HTTP response body is closed successfully
    - durationcheck # check for two durations multiplied together
    - exportloopref # checks for pointers to enclosing loop variables
    - gocritic # Provides many diagnostics that check for bugs, performance and style issues.
    - importas # Enforces consistent import aliases
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - wastedassign # wastedassign finds wasted assignment statements.
    - gofumpt # Gofumpt checks whether code was gofumpt-ed.
    - gci # Gci control golang package import order and make it always deterministic.
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - noctx # noctx finds sending http request without context.Context
    - goconst # Finds repeated strings that could be replaced by a constant
    - dupl # Tool for code clone detection
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - contextcheck #: check the function whether use a non-inherited context
    - gosec #  (gas): Inspects source code for security problems
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _,= f())
    - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - forbidigo # Forbids identifiers
    - err113 # Golang linter to check the errors handling expressions
    - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - rowserrcheck # checks whether Err of rows is checked successfully
    - nestif # Reports deeply nested if statements
    - gochecknoinits # Checks that no init functions are present in Go code
    - tenv #: tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - promlinter # Check Prometheus metrics naming via promlint
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - asasalint # Check for pass []any as any in variadic func(...any).
    - bidichk # Checks for dangerous unicode character sequences.
    - errcheck # Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - inamedparam # Reports interfaces with unnamed method parameters.
    - interfacebloat # checks the number of methods inside an interface.
    - maintidx # Maintidx measures the maintainability index of each function.
    - musttag # Enforce field tags in (un)marshaled structs.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    - perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - protogetter # Reports direct reads from proto message fields when getters should be used.
    - testifylint # Checks usage of github.com/stretchr/testify.
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library.
    - spancheck # Checks for mistakes with OpenTelemetry/Census spans.
  disable:
    - gomnd # An analyzer to detect magic numbers.
    - tagliatelle # Checks the struct tags.
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - forcetypeassert # finds forced type assertions
    - goimports # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - exhaustive # check exhaustiveness of enum switch statements
    - godot # Check if comments end in a period
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - makezero # Finds slice declarations with non-zero initial length
    - cyclop # checks function and package cyclomatic complexity
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - funlen # Tool for detection of long functions
    - gocognit # Computes and checks the cognitive complexity of functions
    - goheader # Checks is file header matches to pattern
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - lll # Reports long lines
    - varnamelen #: checks that the length of a variable's name matches its scope
    - whitespace # Tool for detection of leading and trailing whitespace
    - wsl # Whitespace Linter - Forces you to use empty lines!
    - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
    - wrapcheck # Checks that errors returned from external packages are wrapped
    - ireturn # Accept Interfaces, Return Concrete Types.
    - gochecknoglobals # Check that no global variables exist
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - testpackage # linter that makes you use a separate _test package
    - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test

# output configuration options
output:
  # The formats used to render issues.
  # Formats:
  # - `colored-line-number`
  # - `line-number`
  # - `json`
  # - `colored-tab`
  # - `tab`
  # - `html`
  # - `checkstyle`
  # - `code-climate`
  # - `junit-xml`
  # - `github-actions`
  # - `teamcity`
  # - `sarif`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
   - format: colored-line-number
     path: stdout
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true
  # Add a prefix to the output file references.
  # Default: ""
  path-prefix: ""
  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true
  # Order to use when sorting results.
  # Require `sort-results` to `true`.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
  # Show statistics per linter.
  # Default: false
  show-stats: true

# skip specific linters for tests
issues:
  exclude-rules:
    - path: _test.go
      linters:
        - dupl
        - errorlint
        - err113
        - goconst
        - govet
        - importas
        - perfsprint
        - protogetter

# all available settings of specific linters
linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  errchkjson:
    check-error-free-encoding: true
    report-no-exported: true
  govet:
    enable:
      - asmdecl # report mismatches between assembly files and Go declarations
      - assign # check for useless assignments
      - atomic # check for common mistakes using the sync/atomic package
      - bools # check for common mistakes involving boolean operators
      - buildtag # check that +build tags are well-formed and correctly located
      - cgocall # detect some violations of the cgo pointer passing rules
      - composites # check for unkeyed composite literals
      - copylocks # check for locks erroneously passed by value
      - errorsas # report passing non-pointer or non-error values to errors.As
      - framepointer # report assembly that clobbers the frame pointer before saving it
      - httpresponse # check for mistakes using HTTP responses
      - ifaceassert # detect impossible interface-to-interface type assertions
      - loopclosure # check references to loop variables from within nested functions
      - lostcancel # check cancel func returned by context.WithCancel is called
      - nilfunc # check for useless comparisons between functions and nil
      - printf # check consistency of Printf format strings and arguments
      - shift # check for shifts that equal or exceed the width of the integer
      - sigchanyzer # check for unbuffered channel of os.Signal
      - stdmethods # check signature of methods of well-known interfaces
      - stringintconv # check for string(int) conversions
      - structtag # check that struct field tags conform to reflect.StructTag.Get
      - testinggoroutine # report calls to (*testing.T).Fatal from goroutines started by a test.
      - tests # check for common mistaken usages of tests and examples
      - unmarshal # report passing non-pointer or non-interface values to unmarshal
      - unreachable # check for unreachable code
      - unsafeptr # check for invalid conversions of uintptr to unsafe.Pointer
      - unusedresult # heck for unused results of calls to some functions
      - atomicalign
      - deepequalerrors
      - findcall
      - nilness
      - shadow
      - sortslice
      - reflectvaluecompare
      - unusedwrite
      - appends
      - defers
      - directive
#      - fieldalignment
      - slog
  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - unnamedResult
      - commentedOutCode
      - whyNoLint
  misspell:
    locale: US
  nakedret:
    max-func-lines: 40
  revive:
    confidence: 0.8
    ignore-generated-header: true
    severity: warning
    rules:
      - name: atomic # Check for commonly mistaken usages of the sync/atomic package
        severity: error
      - name: call-to-gc # Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious.
        severity: error
      - name: constant-logical-expr # The rule spots logical expressions that evaluate always to the same value.
        severity: error
      - name: context-as-argument # By convention, context.Context should be the first parameter of a function. This rule spots function declarations that do not follow the convention.
        severity: error
      - name: defer # This rule warns on some common mistakes when using defer statement
        arguments:
          - [ "call-chain", "loop", "method-call" ]
      - name: range
        severity: error
      - name: range-val-in-closure # This rule warns when a range value (or index) is used inside a closure
        severity: error
      - name: redefines-builtin-id # Constant names like false, true, nil, function names like append, make, and basic type names like bool, and byte are not reserved words of the language; therefore the can be redefined.
        severity: error
      - name: unconditional-recursion # Unconditional recursive calls will produce infinite recursion, thus program stack overflow. This rule detects and warns about unconditional (direct) recursive calls.
        severity: error
      - name: waitgroup-by-value # This rule warns when a sync.WaitGroup expected as a by-value parameter in a function or method.
        severity: error
      - name: deep-exit # This rule looks for program exits in functions other than main() or init().
      - name: early-return # In GO it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions.
      - name: blank-imports # Blank import should be only in a main or test package, or have a comment justifying it.
      - name: confusing-results # Function or methods that return multiple, no named, values of the same type could induce error.
      - name: empty-block # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
      - name: error-strings # By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.
      - name: identical-branches # An if-then-else conditional with identical implementations in both branches is an error.
      - name: if-return # Checking if an error is nil to just after return the error or nil is redundant.
      - name: increment-decrement # By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using the ++ operator.
      - name: indent-error-flow # This rule highlights redundant else-blocks that can be eliminated from the code.
      - name: optimize-operands-order # This rule spots logical expressions where the order of evaluation of terms seems non optimal.
      - name: struct-tag # Struct tags are not checked at compile time. This rule, checks and warns if it finds errors in common struct tags types like: asn1, default, json, protobuf, xml, yaml.
      - name: superfluous-else # This rule highlights redundant else-blocks that can be eliminated from the code.
      - name: unexported-naming # This rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter.
      - name: unnecessary-stmt # This rule suggests to remove redundant statements like a break at the end of a case block, for improving the code's readability.
      - name: useless-break # This rule suggests to remove useless break statements in switch cases.
  #      - name: string-of-int # This rule warns when converting an integer to a string.
  #        severity: error
  #      - name: time-equal # This rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method
  #        severity: error
  #      - name: range-val-address #  This rule warns when assigning the address of the variable, passing the address to append() or using it in a map.
  #        severity: error
  #      - name: time-naming # Using unit-specific suffix like "Secs", "Mins", ... when naming variables of type time.Duration can be misleading, this rule highlights those cases.
  #      - name: var-declaration # This rule proposes simplifications of variable declarations.
  #      - name: unexported-return # This rule warns when an exported function or method returns a value of an un-exported type.
  #      - name: context-keys-type # Basic types should not be used as a key in context.WithValue.
  #        severity: error
  #      - name: datarace # This rule spots potential dataraces caused by go-routines capturing (by-reference) particular identifiers of the function from which go-routines are created
  #        severity: error
  gci:
    skip-generated: true
    skip-vendor: true
    custom-order: true
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - localmodule
      - blank
      - dot
  prealloc:
    simple: true  # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    range-loops: false # Report pre-allocation suggestions on range loops.
    for-loops: true # Report pre-allocation suggestions on for loops.
  gocyclo:
    min-complexity: 30
  goconst:
    min-len: 2
    min-occurrences: 3
  nlreturn:
    block-size: 2
  dupl:
    threshold: 150
  godox:
    keywords:
      - BUG
      - FIXME
      - HACK
  gosec:
    exclude-generated: true
    severity: medium
    confidence: medium
    concurrency: 4
  nolintlint:
    allow-unused: false # Disable to ensure that all nolint directives actually have an effect.
    require-specific: true # Enable to require nolint directives to mention the specific linter being suppressed.
  predeclared:
    q: true # Include method names and field names (i.e., qualified names) in checks.
  dogsled:
    max-blank-identifiers: 3
  errorlint:
    comparison: true # Check for plain error comparisons.
    errorf: true # Check whether fmt.Errorf uses the %w verb for formatting errors.
    asserts: true # Check for plain type assertions and type switches.
  tagliatelle:
    case:
      use-field-name: true
      rules:
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
        yaml: goCamel
        toml: goCamel
        mapstructure: goSnake
        env: upperSnake
  gofumpt:
    module-path: github.com/xenking/managed-tg-gpt-chat
    extra-rules: true
  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx
  asasalint:
    # To specify a set of function names to exclude.
    # The values are merged with the builtin exclusions.
    # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`.
    # Default: ["^(fmt|log|logger|t|)\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$"]
    exclude:
      - Append
      - \.Wrapf
    # To enable/disable the asasalint builtin exclusions of function names.
    # See the default value of `exclude` to get the builtin exclusions.
    # Default: true
    use-builtin-exclusions: true
    # Ignore *_test.go files.
    # Default: false
    ignore-test: true
  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    forbid:
      # Builtin function:
      - ^print.*$
      # Optional message that gets included in error reports.
      - p: ^fmt\.Print.*$
        msg: Do not commit print statements.
      # Forbid spew Dump, whether it is called as function or method.
      # Depends on analyze-types below.
      - ^spew\.(ConfigState\.)?Dump$
    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude-godoc-examples: false
    # Instead of matching the literal source code,
    # use type information to replace expressions with strings that contain the package name
    # and (for methods and fields) the type name.
    # This makes it possible to handle import renaming and forbid struct fields and methods.
    # Default: false
    analyze-types: true
  gomoddirectives:
    # Allow local `replace` directives.
    # Default: false
    replace-local: false
    # List of allowed `replace` directives.
    # Default: []
#    replace-allow-list:
#      - launchpad.net/gocheck
    # Allow to not explain why the version has been retracted in the `retract` directives.
    # Default: false
    retract-allow-no-explanation: false
    # Forbid the use of the `exclude` directives.
    # Default: false
    exclude-forbidden: false
  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: false
    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: true
    # List of aliases
    # Default: []
    alias:
      # You can specify the package path by regular expression,
      # and alias by regular expression expansion syntax like below.
      # see https://github.com/julz/importas#use-regular-expression for details
#      - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
#        alias: $1$2
  inamedparam:
    # Skips check for interface methods with only a single parameter.
    # Default: false
    skip-single-param: false
  interfacebloat:
    # The maximum number of methods allowed for an interface.
    # Default: 10
    max: 10
  ireturn:
    # ireturn does not allow using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces
    # - `generic` for generic interfaces added in go 1.18

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - empty
      - error
      - stdlib
      - anon
      - generic
      # You can specify idiomatic endings for interface
      - (or|er)$
    # reject-list of interfaces
#    reject:
#      - github.com\/user\/package\/v4\.Type
  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    under: 20
  musttag:
    # A set of custom functions to check in addition to the builtin ones.
    # Default: json, xml, gopkg.in/yaml.v3, BurntSushi/toml, mitchellh/mapstructure, jmoiron/sqlx
    functions:
      # The full name of the function, including the package.
      - name: github.com/hashicorp/hcl/v2/hclsimple.DecodeFile
        # The struct tag whose presence should be ensured.
        tag: hcl
        # The position of the argument to check.
        arg-pos: 2
  nilnil:
    # List of return types to check.
    # Default: ["ptr", "func", "iface", "map", "chan", "uintptr", "unsafeptr"]
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan
  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    int-conversion: true
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: true
    # Optimizes `fmt.Errorf`.
    # Default: true
    errorf: true
    # Optimizes `fmt.Sprintf` with only one argument.
    # Default: true
    sprintf1: true
    # Optimizes into strings concatenation.
    # Default: true
    strconcat: true
  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    # Default: false
    strict: false
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    # Default: []
#    disabled-linters:
#      - Help
#      - MetricUnits
#      - Counter
#      - HistogramSummaryReserved
#      - MetricTypeInName
#      - ReservedChars
#      - CamelCase
#      - UnitAbbreviations
  protogetter:
    # Skip files generated by specified generators from the checking.
    # Checks only the file's initial comment, which must follow the format: "// Code generated by <generator-name>".
    # Files generated by protoc-gen-go, protoc-gen-go-grpc, and protoc-gen-grpc-gateway are always excluded automatically.
    # Default: []
#    skip-generated-by: ["protoc-gen-go-my-own-generator"]
    # Skip files matching the specified glob pattern from the checking.
    # Default: []
#    skip-files:
#      - "*.pb.go"
#      - "*/vendor/*"
#      - "/full/path/to/file.go"
    # Skip any generated files from the checking.
    # Default: false
    skip-any-generated: true
    # Skip first argument of append function.
    # Default: false
    replace-first-arg-in-append: true
#  spancheck:
#    # Checks to enable.
#    # Options include:
#    # - `end`: check that `span.End()` is called
#    # - `record-error`: check that `span.RecordError(err)` is called when an error is returned
#    # - `set-status`: check that `span.SetStatus(codes.Error, msg)` is called when an error is returned
#    # Default: ["end"]
#    checks:
#      - end
#      - record-error
#      - set-status
#    # A list of regexes for function signatures that silence `record-error` and `set-status` reports
#    # if found in the call path to a returned error.
#    # https://github.com/jjti/go-spancheck#ignore-check-signatures
#    # Default: []
##    ignore-check-signatures:
##      - "telemetry.RecordError"
#    # A list of regexes for additional function signatures that create spans.
#    # This is useful if you have a utility method to create spans.
#    # Each entry should be of the form `<regex>:<telemetry-type>`, where `telemetry-type` can be `opentelemetry` or `opencensus`.
#    # https://github.com/jjti/go-spancheck#extra-start-span-signatures
#    # Default: []
#    extra-start-span-signatures:
  testifylint:
    # Enable all checkers (https://github.com/Antonboom/testifylint#checkers).
    # Default: false
    # Disable checkers by name
    # (in addition to default
    #   suite-thelper
    # ).
#    disable:
#      - blank-import
    # Disable all checkers (https://github.com/Antonboom/testifylint#checkers).
    # Default: false
    disable-all: true
    # Enable checkers by name
    # (in addition to default
    #   blank-import, bool-compare, compares, empty, error-is-as, error-nil, expected-actual, go-require, float-compare,
    #   len, negative-positive, nil-compare, require-error, suite-dont-use-pkg, suite-extra-assert-call, useless-assert
    # ).
    enable:
      - bool-compare
      - compares
      - empty
      - error-is-as
      - error-nil
      - expected-actual
      - float-compare
      - len
      - suite-dont-use-pkg
      - suite-thelper
      - blank-import
      - go-require
      - negative-positive
      - nil-compare
      - useless-assert
    #      - suite-extra-assert-call
    #      - require-error
    bool-compare:
      # To ignore user defined types (over builtin bool).
      # Default: false
      ignore-custom-types: true
    expected-actual:
    # Regexp for expected variable name.
    # Default: (^(exp(ected)?|want(ed)?)([A-Z]\w*)?$)|(^(\w*[a-z])?(Exp(ected)?|Want(ed)?)$)
    #      pattern: ^expected
    go-require:
      # To ignore HTTP handlers (like http.HandlerFunc).
      # Default: false
      ignore-http-handlers: true
    #require-error:
    # Regexp for assertions to analyze. If defined, then only matched error assertions will be reported.
    # Default: ""
    #      fn-pattern: ^(Errorf?|NoErrorf?)$
    suite-extra-assert-call:
      # To require or remove extra Assert() call?
      # Default: remove
      mode: remove
  thelper:
    test:
      # Check *testing.T is first param (or after context.Context) of helper function.
      # Default: true
      first: true
      # Check *testing.T param has name t.
      # Default: true
      name: true
      # Check t.Helper() begins helper function.
      # Default: true
      begin: true
    benchmark:
      # Check *testing.B is first param (or after context.Context) of helper function.
      # Default: true
      first: true
      # Check *testing.B param has name b.
      # Default: true
      name: true
      # Check b.Helper() begins helper function.
      # Default: true
      begin: true
    tb:
      # Check *testing.TB is first param (or after context.Context) of helper function.
      # Default: true
      first: true
      # Check *testing.TB param has name tb.
      # Default: true
      name: true
      # Check tb.Helper() begins helper function.
      # Default: true
      begin: true
    fuzz:
      # Check *testing.F is first param (or after context.Context) of helper function.
      # Default: true
      first: true
      # Check *testing.F param has name f.
      # Default: true
      name: true
      # Check f.Helper() begins helper function.
      # Default: true
      begin: true
  usestdlibvars:
    # Suggest the use of http.MethodXX.
    # Default: true
    http-method: true
    # Suggest the use of http.StatusXX.
    # Default: true
    http-status-code: true
    # Suggest the use of time.Weekday.String().
    # Default: true
    time-weekday: true
    # Suggest the use of time.Month.String().
    # Default: false
    time-month: true
    # Suggest the use of time.Layout.
    # Default: false
    time-layout: true
    # Suggest the use of crypto.Hash.String().
    # Default: false
    crypto-hash: true
    # Suggest the use of rpc.DefaultXXPath.
    # Default: false
    default-rpc-path: true
    # Suggest the use of sql.LevelXX.String().
    # Default: false
    sql-isolation-level: true
    # Suggest the use of tls.SignatureScheme.String().
    # Default: false
    tls-signature-scheme: true
    # Suggest the use of constant.Kind.String().
    # Default: false
    constant-kind: true
